use crate::ast::*;
use std::str::FromStr;
use std::rc::Rc;

grammar;

// Macro for making comma-separated lists of anything
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        },
    },
};

CommaBefore<T>: Vec<T> = {
    <v:("," <T>)*> => v,
}

Block: Rc<Block> = {
	"{" <b:BlockInnerNotEmpty> "}" => b,
};

// kal files are "block inners".
// Essentially they are zero parameter functions
// We explicitly allow empty files.
pub BlockInner: Rc<Block> = {
    =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: None,
        }),
    <expr:Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(expr),
        }),
    <v:(<Statement> ";")+> <e:Expression?> =>
        Rc::new(Block {
            statements: v,
            expression: e,
        }),
}

// Blocks do not allow the block to be empty. This means that lone curly braces are empty objects instead.
pub BlockInnerNotEmpty: Rc<Block> = {
    <e:Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(e),
        }),
    <v:(<Statement> ";")+> <e:Expression?> =>
        Rc::new(Block {
            statements: v,
            expression: e,
        }),
}

Statement: Rc<dyn Statement> = {
    <le:LetStatement> => le,
    <a:Assignment> => a,
    <e:Expression> => e.into_statement(),
}

// Function literal is highest operator precedence. Everything after fn () is considered part of the
// function literal. Break, continue and send also capture all of the following expression.
Expression: Rc<dyn Expression> = {
    <function:Function> => function,
    <send:SendExpr> => send,
    <continue_expr:Continue> => continue_expr,
    <break_expr:Break> => break_expr,
    BooleanExpression,
}

BooleanExpression: Rc<dyn Expression> = {
    <left:BooleanExpression> <operator:BooleanOperator> <right:ComparisonExpression> =>
        Rc::new(BooleanExpression {
            left,
            right,
            operator,
        }),
    NotExpression,
}

BooleanOperator: BooleanOperator = {
    "and" => BooleanOperator::And,
    "or" => BooleanOperator::Or,
    "xor" => BooleanOperator::Xor,
}

NotExpression: Rc<dyn Expression> = {
    "not" <expr:NotExpression> =>
        Rc::new(NotExpression {
            expr,
        }),
    ComparisonExpression,
}

ComparisonExpression: Rc<dyn Expression> = {
    <left:ComparisonExpression> <operator:ComparisonOperator> <right:AddExpression> =>
        Rc::new(ComparisonExpression {
            left,
            right,
            operator,
        }),
    AddExpression,
}

ComparisonOperator: ComparisonOperator = {
    "==" => ComparisonOperator::Equal,
    "!=" => ComparisonOperator::NotEqual,
    "<=" => ComparisonOperator::LessEqual,
    "<" => ComparisonOperator::Less,
    ">=" => ComparisonOperator::GreaterEqual,
    ">" => ComparisonOperator::Greater,
}

AddExpression: Rc<dyn Expression> = {
    <left:AddExpression> "+" <right:MultiplyExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Add,
        }),
    <left:AddExpression> "-" <right:MultiplyExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Subtract,
        }),
    MultiplyExpression,
}

MultiplyExpression: Rc<dyn Expression> = {
    <left:MultiplyExpression> "*" <right:NormalExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Multiply,
        }),
    <left:MultiplyExpression> "/" <right:NormalExpression> =>
        Rc::new(NumericExpression {
            left,
            right,
            operator: NumericOperator::Divide,
        }),
    NegativeExpression,
}

NegativeExpression: Rc<dyn Expression> = {
    "-" <expr:NormalExpression> =>
        Rc::new(NegativeExpression {
            expr,
        }),
    NormalExpression,
}

NormalExpression: Rc<dyn Expression> = {
    <literal:Literal> => literal,
    <if_expr:IfExpression> => if_expr,
    <handle:Handle> => handle,
    <loop_expr:LoopExpression> => loop_expr,
    SimpleExpression,
}

SimpleExpression: Rc<dyn Expression> = {
    // <continue_expr:ContinueLonely> => continue_expr,
    // <send_expr:SendExprLonely> => send_expr,
    // <break_expr:BreakLonely> => break_expr,
    <location:IdentLocation> => Rc::new(location),
    <location:DotLocation> => Rc::new(location),
    <location:IndexLocation> => Rc::new(location),
    <location:DotLocationExpression> => Rc::new(location),
    <location:IndexLocationExpression> => Rc::new(location),
    <func_invo:FunctionInvocation> => func_invo,
    ParenExpression,
}

LocationBaseExpression: Rc<dyn Expression> = {
    <func_invo:FunctionInvocation> => func_invo,
    ParenExpression,
}

ParenExpression: Rc<dyn Expression> = {
    "(" <e:Expression> ")" => e,
}

Function: Rc<Function> = {
    "fn" "(" <pattern:ListPattern> ")" <body:FunctionBody> =>
    Rc::new(Function {
        pattern: Rc::new(pattern),
        body,
    }),
}

SpreadPattern: SpreadPattern = {
    "..." <i:Ident?> => match i {
        None => SpreadPattern::Unnamed,
        Some(s) => SpreadPattern::Named(s),
    }
}

// ()
// (a)
// (a, )
// (a, ...)
// (...)
// (..., )
// (a, ..., b)
// (a, ..., b, )
// (..., b)
// (..., b, )

ListPattern: ListPattern = {
    => ListPattern {
        before_params: vec![],
        spread_and_after_params: None,
    },
    <spread:SpreadPattern> <after_params:("," <Ident>)*> ","? => ListPattern {
        before_params: vec![],
        spread_and_after_params: Some((spread, after_params)),
    },
    <a:Ident> <before_params:("," <Ident>)*> <spread_and_after_params:("," <SpreadPattern> <("," <Ident>)*>)?> ","? => {
        let mut before_params = before_params;
        before_params.insert(0, a);
        ListPattern {
            before_params,
            spread_and_after_params,
        }
    }
}

ObjectPattern: ObjectPattern = {
    => ObjectPattern {
        params: vec![],
        spread: None,
    },
    <spread:SpreadPattern> <after_params:("," <Ident>)*> ","? => ListPattern {
        before_params: vec![],
        spread_and_after_params: Some((spread, after_params)),
    },
    <a:Ident> <before_params:("," <Ident>)*> <spread_and_after_params:("," <SpreadPattern> <("," <Ident>)*>)?> ","? => {
        let mut before_params = before_params;
        before_params.insert(0, a);
        ListPattern {
            before_params,
            spread_and_after_params,
        }
    }
}

FunctionBody: Rc<Block> = {
    <e: Expression> =>
        Rc::new(Block {
            statements: Vec::new(),
            expression: Some(e),
        }),
    <b: Block> => b,
}

LetPattern: Rc<LetPattern> = {
    <pattern:Ident> => Rc::new(LetPattern::Ident(pattern)),
    "[" <pattern:ListPattern> "]" => Rc::new(LetPattern::List(pattern)),
}

LetStatement: Rc<LetStatement> = {
    "let" <pattern:LetPattern> "=" <expr:Expression> =>
    Rc::new(LetStatement {
        pattern,
        expr,
    }),
}

Assignment: Rc<Assignment> = {
    <location:LocationChain> "=" <expr:Expression> =>
        Rc::new(Assignment {
            location,
            expr,
        }),
}

IfExpression: Rc<IfExpression> = {
    "if" <cond:Expression> <body:Block> <else_ifs:ElseIf*> <else_body:ElseBody?> =>
    {
        let mut ifs = else_ifs;
        ifs.insert(0, IfPart {
            cond,
            body,
        });
        Rc::new(IfExpression {
            ifs,
            else_body,
        })
    },
}

ElseIf: IfPart = {
    "else" "if" <cond:Expression> <body:Block> =>
        IfPart {
            cond,
            body,
        },
}

ElseBody: Rc<Block> = {
    "else" <b:Block> => b,
}

LoopExpression: Rc<LoopExpression> = {
    "loop" <body:Block> => Rc::new(LoopExpression {
        body,
    }),
}

FunctionInvocation: Rc<FunctionInvocation> = {
    <base:SimpleExpression> "(" <elems:Comma<ListElem>> ")" =>
        Rc::new(FunctionInvocation {
            base,
            elems,
        }),
}

Literal: Rc<dyn Expression> = {
    "null" => Rc::new(Null),
    "true" => Rc::new(Bool(true)),
    "false" => Rc::new(Bool(false)),
    <n:Int> => Rc::new(Int(n)),
    //<s:Str> => Literal::String(s),
    <l:List> => l,
    <o:Object> => o,
}

List: Rc<List> = {
    "[" <elems:Comma<ListElem>> "]" =>
        Rc::new(List {
            elems,
        }),
}

ListElem: ListElem = {
    <e:Expression> => ListElem::Elem(e),
    "..." <e:SimpleExpression> => ListElem::Spread(e),
}

Object: Rc<Object> = {
    "{" <elems:Comma<ObjectElem>> "}" =>
        Rc::new(Object {
            elems,
        }),
}

ObjectElem: ObjectElem = {
    <i:Ident> ":" <e:Expression> => ObjectElem::Kv(i, e),
    "..." <e:SimpleExpression> => ObjectElem::Spread(e),
}

Ident: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_owned(),
}

Int: i64 = {
    // `unwrap` todo convert to fallible operation (e.g. Int or TooLong)
    <i:r"0|(?:[1-9][_0-9]*)"> => {
        let string = i.to_string();
        let string = i.replace("_", "");
        i64::from_str(&string).unwrap()
    }
}


Handle: Rc<Handle> = {
    "handle" <expr:FunctionInvocation> "{" <match_arms:Comma<HandleMatch>> "}" =>
        Rc::new(Handle {
            expr,
            match_arms,
        }),
}

HandleMatch: HandleMatch = {
    <symbol:Ident> <param:Ident> <block:Block> =>
        HandleMatch {
            symbol,
            param,
            block,
        },
}

SendExpr: Rc<SendExpr> = {
    // "with" is not just aesthetic here, it solves a grammar ambiguity.
    // It might be solvable without "with", I didn't try very hard...
    "send" <symbol:Ident> <expr:("with" <Expression>)?> =>
        Rc::new(SendExpr {
            symbol,
            expr,
        }),
}

Continue: Rc<Continue> = {
    "continue" <expr:("with" <Expression>)?> =>
        Rc::new(Continue {
            expr,
        }),
}

Break: Rc<Break> = {
    "break" <expr:("with" <Expression>)?> =>
        Rc::new(Break {
            expr,
        }),
}

LocationChain: LocationChain = {
    <location:IdentLocation> => location,
    <location:DotLocation> => location,
    <location:IndexLocation> => location,
}

IdentLocation: LocationChain = {
    <string:Ident> => LocationChain {
        base: LocationChainBase::Ident(string),
        parts: Vec::new(),
    },
}

DotLocation: LocationChain = {
    <base:LocationChain> "." <prop:Ident> => {
        let mut base = base;
        base.parts.push(Rc::new(DotLocation {
            prop,
        }));
        base
    },
}

IndexLocation: LocationChain = {
    <base:LocationChain> "[" <index:Expression> "]" =>{
        let mut base = base;
        base.parts.push(Rc::new(IndexLocation {
            index,
        }));
        base
    },
}

LocationChainExpression: LocationChain = {
    <expr:LocationBaseExpression> => LocationChain {
        base: LocationChainBase::Expression(expr),
        parts: Vec::new(),
    },
    <location:DotLocationExpression> => location,
    <location:IndexLocationExpression> => location,
}

DotLocationExpression: LocationChain = {
    <base:LocationChainExpression> "." <prop:Ident> => {
        let mut base = base;
        base.parts.push(Rc::new(DotLocation {
            prop,
        }));
        base
    },
}

IndexLocationExpression: LocationChain = {
    <base:LocationChainExpression> "[" <index:Expression> "]" =>{
        let mut base = base;
        base.parts.push(Rc::new(IndexLocation {
            index,
        }));
        base
    },
}
