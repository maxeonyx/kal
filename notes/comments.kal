#! shebang is allowed because # is a normal comment

# normal comment (ignored in docs)

#*
block comment (ignored in docs)
*#

#*
#*
nested block comment
*#
*#

## doc comments are markdown have two ##.
## but unlike markdown the number of ## increases with the importance of the header

##*

# sub-heading

Everything in here is documentation,
and it can span as many lines as you like.

Code blocks (*without* a language marker) run as if they are not in comments, but they are also included in the markdown. AKA literate programming.
```
print("hello")
```

*##

# comment
## doc comment
### sub-heading
#### heading
##### page title
###### sub-section
####### section
######## library title


let fn_with_comment = fn() {

    ### Function Name

    ## It does this

}

# `help` is an intrinsic which returns the documentation of a function
let text = help(fn_with_comment);

# convert to real markdown
let text = help(fn_with_comment, "markdown");

# convert to html
let text = help(fn_with_comment, "html");




##*
Another Idea: Comment heading levels depend on the depth of the object structure!

e.g.
```
{
    ## Should the heading be automatically put *above* any other plain doc comments like this preceding it?
    
    ### Object name *heading*
    
    ## Object doc comment is attached to the object. If this was returned from a file, it would be a module object.
    
    fibonacci: fn () {
        ### Dumb Fibonacci
        ## Just returns the first two numbers because I'm lazy
        ## This comment is attached to the function object.
        ## It becomes a sub-heading of the parent object!
        ## Nesting of headings only happens through objects, not functions.
        ## (I guess it could happen through types if I do types?)
        [0, 1]
    },
}
